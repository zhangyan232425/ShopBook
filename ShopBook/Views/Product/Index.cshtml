@model ReflectionIT.Mvc.Paging.PagingList<ShopBook.Models.Product>
@using ReflectionIT.Mvc.Paging
@addTagHelper *, ReflectionIT.Mvc.Paging
@{
    ViewData["Title"] = "Product";
}

<link rel="stylesheet" href="~/css/product.css"/>

<nav aria-label="eg">
    @await this.Component.InvokeAsync("Pager",new{ pagingList = this.Model})
</nav>

<form method="get" class="form-inline">
    <input name="filter" class="form-control" placeholder="filter" value="@Model.RouteValue["Filter"]" />
    <button type="submit" class="btn btn-info">
        <i >
            <span class="glyphicon glyphicon-search" aria-hidden="true"></span></i> Search
    </button>
</form>

<table >
    <thead>
        <tr>
            <th>
                @Html.SortableHeaderFor(model => model.Name, this.Model)
            </th>
            <th>
                @Html.SortableHeaderFor(model => model.Price, this.Model)
            </th>
            <th>
                @Html.SortableHeaderFor(model => model.Store, this.Model)
            </th>
            <th>
                @Html.SortableHeaderFor(model => model.ProductDate, this.Model)
            </th>
        </tr>
    </thead>


@foreach (var item in Model)
{
    <tr>
    <td>
    @Html.DisplayFor(modelItem => item.Name)
    </td>
    <td>
    @Html.DisplayFor(modelItem => item.Price)
    </td>
    <td>
    @Html.DisplayFor(modelItem => item.Store)
    </td>
    <td>
    @Html.DisplayFor(modelItem => item.ProductDate)
    </td>
    </tr>
}

</table>
<nav aria-label=" example">
    <vc:pager paging-list="@Model" />
</nav>

